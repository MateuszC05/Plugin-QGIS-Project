# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DbfinderDialog
                                 A QGIS plugin
 This plugin serch localization from Database and show localization in map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Mateusz Ciborowski
        email                : mateusz.cibor123@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
import psycopg2
import functools
import operator
import re
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Db_finder_dialog_base.ui'))


class DbfinderDialog(QtWidgets.QDialog, FORM_CLASS):
    
    def __init__(self, parent=None):
        """Constructor."""
        super(DbfinderDialog, self).__init__(parent)

        self.SERVER_NAME = '*****';
        self.DATABASE_NAME = '*****';
        self.USERNAME = '*****';
        self.PASSWORD = '*****';
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.szukajBtn.clicked.connect(self.odczytaj_wart)
        self.pokazBtn.clicked.connect(self.selected)
        
    def create_connection(self):
            self.conn = psycopg2.connect(
        dbname = self.DATABASE_NAME,
        user= self.USERNAME,
        host = self.SERVER_NAME,
        password = self.PASSWORD
        )
            self.tables = []
            self.cur = self.conn.cursor()
        
    
    
    
    def odczytaj_wart(self):
        self.input_cit = self.miastoEdt.displayText()
        self.input_ul = self.ulicaEdt.displayText()
        self.input_nmbr = self.nrdomuEdt.displayText() 
        self.szukaj_wart() 
 
    
    def szukaj_wart(self):
        
        if self.wynikEdt.count() > 0:
            self.wynikEdt.clear()
              
        
        self.create_connection()
        self.cur.execute("SELECT ******* "  
                     .format(self.input_cit, self.input_ul, self.input_nmbr))
        dane = self.cur.fetchall()
        print(dane) 
        for rekord in dane:
            wynik = "{} {} {} {}".format(rekord[0], rekord[1], rekord[2], rekord[3])
            self.tables.append(wynik)
            print(wynik)
        
        self.conn.close()
        self.wynikEdt.addItems(self.tables)
        
        
    
    def convert_tuple(tup):
        str = functools.reduce(operator.add, (tup))
        return str

    def selected(self):
        wybrane = self.wynikEdt.selectedItems()
        item_id = wybrane[0]
        xx = item_id.text()
        self.r1 = re.findall(r"\d*\b",xx)
        print(self.r1[0])
        self.zoomin()
    
    def zoomin(self):
        print('wykonano zoom')
        filtr = ("\"id\" ={}").format(self.r1[0])
        print(filtr)
        self.layer = iface.activeLayer()
        print(self.layer.name())
        self.layer.selectByExpression(filtr)
        iface.actionZoomToSelected().trigger()
        



 
        